"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
from os import getenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent  # содержит путь до django-проекта (shop_backend)

load_dotenv(BASE_DIR / '.env')  # Берём данные из .env

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Обеспечивает целостность передачи данных между серверами и клиентами
SECRET_KEY = getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# Режим отладки
DEBUG = True

# Доступные хосты, обычно ставят * для любого домена
ALLOWED_HOSTS = ['*']


# Application definition
# Сюда и добавляем свои приложения (проект состоит из приложений со своим функционалом)
INSTALLED_APPS = [
    'django.contrib.admin',  # Приложение для функционала администратора и административной панели
    'django.contrib.auth',  # Приложение предоставляет систему аутентификации и авторизации пользователей
    'django.contrib.contenttypes',  # Предоставляет универсальную систему управления типами контента (модели, объекты..)
    'django.contrib.sessions',  # Приложение, которое предоставляет механизмы для работы с сеансами пользователей
    'django.contrib.messages',  # Механизмы для управления сообщениями, которые могут быть отображены пользователю
    'django.contrib.staticfiles',  # Управление статическими файлами, такими как CSS, JavaScript, изображения и другие
]
# Список промежуточных программных компонентов (middleware), которые обрабатывают запросы и ответы
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',  # обеспечивает базовую безопасность вашего приложения
    'django.contrib.sessions.middleware.SessionMiddleware',  # обрабатывает сеансы пользователей в вашем приложении
    'django.middleware.common.CommonMiddleware',  # выполняет различные общие операции, такие как
    # обработка заголовков запроса, установка кодировки символов, обработка перенаправлений и другие
    'django.middleware.csrf.CsrfViewMiddleware',  # Обрабатывает защиту от атаки типа CSRF
    # (меж сайтовая подделка запроса). Он генерирует и проверяет токены CSRF для каждого формуляра в вашем приложении,
    # чтобы предотвратить возможность выполнения несанкционированных запросов.
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # проверяет, аутентифицирован ли пользователь,
    # и предоставляет доступ к данным пользователя во время обработки запросов.
    'django.contrib.messages.middleware.MessageMiddleware',  # обрабатывает сообщения,
    # которые могут быть отображены пользователю.
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # обрабатывает защиту от атаки типа "кликжакинг"
    # (нежелательное отображение вашего сайта во фрейме на другом сайте).
]

ROOT_URLCONF = 'config.urls'  # Это где располагаются url адреса
# Отвечает за работу с шаблонами
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
# Где располагается файл wsgi
WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': getenv('DB_ENGINE'),
        'NAME': getenv('DB_NAME'),
        'USER': getenv('DB_USER'),
        'PASSWORD': getenv('DB_PASSWORD'),
        'HOST': getenv('HOST'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/
# Переменные связанные со временем и языком проекта
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
# установка DEFAULT_AUTO_FIELD в 'django.db.models.BigAutoField' означает,
# что по умолчанию Django будет использовать BigAutoField для генерации значений первичного ключа модели.
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
